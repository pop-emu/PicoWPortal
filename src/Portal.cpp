#include "Portal.hpp"
#include <stdio.h>
#include "tusb.h"

bool Portal::canSend;
bool Portal::active;
std::queue<Command> Portal::outgoing;
unsigned char Portal::counter;
Color Portal::colorLeft;
Color Portal::colorRight;
Color Portal::colorTrap;
Figure Portal::figures[16];

void Portal::Initialize()
{
    outgoing = std::queue<Command>();
    active = false;
    canSend = true;
    counter = 0;

    colorLeft = {
        .red = 0x00,
        .green = 0x00,
        .blue = 0x00,
    };

    colorRight = {
        .red = 0x00,
        .green = 0x00,
        .blue = 0x00,
    };

    colorTrap = {
        .red = 0x00,
        .green = 0x00,
        .blue = 0x00,
    };

    static const unsigned char Legendary_Jawbreaker[] = {
        0xd8, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xd6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x34, 0xd0, 0x9f,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x91, 0xa5, 0xcb, 0x73, 0xd8, 0xa8, 0xd0, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x5a, 0x43, 0x01, 0x0e, 0x70, 0x8b, 0x68, 0x55, 0x57, 0xf9, 0x9e, 0xbb, 0xcb, 0xba, 0x8d, 0x44,
        0xdc, 0x8c, 0x36, 0x56, 0x6d, 0xb5, 0x8e, 0x51, 0x7f, 0x49, 0x00, 0x9f, 0xbc, 0x37, 0xac, 0x0b,
        0x47, 0xef, 0xe1, 0x63, 0x52, 0x0f, 0xd0, 0x51, 0x62, 0x21, 0xfd, 0xab, 0xec, 0x2b, 0xcb, 0x38,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7b, 0x55, 0x2b, 0x09, 0x3d, 0xef, 0xff, 0x1c, 0xd0, 0xe7, 0xd1, 0x98, 0x48, 0xb4, 0x4e, 0x4b,
        0x7b, 0x33, 0x6c, 0xd5, 0x82, 0x06, 0x26, 0x56, 0x91, 0x16, 0x38, 0x1c, 0xed, 0x88, 0xcd, 0x39,
        0x95, 0x7a, 0xd5, 0x63, 0x6f, 0xf6, 0xeb, 0x42, 0x73, 0xa5, 0xa5, 0xfb, 0x7b, 0x84, 0x3d, 0xdf,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0xc2, 0x8f, 0x7b, 0x53, 0xc7, 0x56, 0x20, 0x21, 0x23, 0x33, 0x03, 0x59, 0x7b, 0x78, 0xd4,
        0x84, 0x87, 0xaa, 0x7a, 0x14, 0x78, 0x18, 0x59, 0x10, 0xfe, 0xf5, 0x3b, 0xbb, 0x6d, 0x40, 0x82,
        0xab, 0xca, 0x65, 0x97, 0xf1, 0x28, 0x44, 0x87, 0x79, 0x1d, 0xd0, 0xbd, 0xb3, 0xad, 0x74, 0xdb,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xdc, 0x29, 0x3c, 0x60, 0x16, 0x10, 0x99, 0xc2, 0x5b, 0xf7, 0x3c, 0xdd, 0x47, 0x00, 0x0a, 0x12,
        0x64, 0x60, 0xb7, 0x86, 0x24, 0x68, 0x43, 0x3e, 0x41, 0x5d, 0xfa, 0xe0, 0xcd, 0xd6, 0x28, 0x84,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x57, 0x80, 0xd1, 0x3a, 0x9a, 0x5a, 0xa8, 0x6f, 0xac, 0xda, 0x2a, 0x18, 0xe8, 0x3e, 0x22,
        0x56, 0x5f, 0xf1, 0x0c, 0x75, 0xfa, 0xa5, 0xfb, 0xb4, 0xa2, 0x71, 0x8e, 0x4c, 0x30, 0xe8, 0xf7,
        0x0f, 0xa9, 0xe1, 0xa4, 0xa4, 0x57, 0x28, 0x2f, 0x30, 0x7e, 0x74, 0xaa, 0x59, 0xf6, 0x80, 0xf0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb9, 0x73, 0x2e, 0x90, 0x02, 0xcc, 0x2b, 0x74, 0xa9, 0x87, 0x9b, 0xb2, 0xba, 0xa0, 0x9b, 0x6d,
        0xce, 0xe8, 0x0c, 0x31, 0x85, 0x9b, 0xe6, 0x09, 0xb6, 0x92, 0x27, 0x52, 0xcc, 0x32, 0xd3, 0xf4,
        0xf1, 0x8b, 0x07, 0xec, 0xa7, 0x23, 0xdb, 0x34, 0x64, 0xfc, 0x81, 0xa6, 0x55, 0x32, 0xc9, 0x64,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa8, 0xc5, 0x1c, 0xcf, 0x26, 0x38, 0x17, 0x06, 0xf4, 0x83, 0x13, 0x15, 0x02, 0x85, 0x9d, 0x46,
        0x4d, 0xc8, 0xc7, 0x39, 0x9b, 0x87, 0x40, 0xe8, 0x16, 0x40, 0x30, 0xb0, 0x5b, 0x37, 0x97, 0xdd,
        0x7e, 0x9c, 0xdc, 0xb0, 0xb5, 0xf8, 0x0a, 0xc2, 0xdf, 0x8b, 0x9e, 0xd4, 0xaa, 0x31, 0xa8, 0xc4,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x9d, 0xbb, 0x84, 0x4e, 0x95, 0xf0, 0xd7, 0xc9, 0xe6, 0x13, 0x50, 0x28, 0x93, 0x8c, 0xe1, 0xe8,
        0x21, 0xb4, 0xa6, 0x01, 0x31, 0x88, 0xe3, 0x25, 0xa8, 0xeb, 0xc6, 0xe0, 0xae, 0x46, 0xe0, 0x8d,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    memcpy(figures[0].data, Legendary_Jawbreaker, 1024);

    figures[0].status = PRESENT;
}

void Portal::HandleCommand(const unsigned char *buf)
{
    unsigned char buffer[32];

    memcpy(buffer, buf, 32);

    switch (buffer[0])
    {
    case 'R':
    {
        Command command = {
            .data = {'R', 0x02, 0x18}
        };

        Portal::Disable();

        outgoing.push(command);
        break;
    }
    case 'A':
    {
        (buffer[1] == 0x01) ? Portal::Enable() : Portal::Disable();
        Command command = {
            .data = {'A', buffer[1]}};
        outgoing.push(command);
        break;
    }
    case 'S':
    {
        Command command = {};

        GetStatus(command.data);

        outgoing.push(command);
        break;
    }
    case 'C':
    {
        Command command = {};

        Color color = {
            .red = buffer[1],
            .green = buffer[2],
            .blue = buffer[3],
        };

        colorLeft = color;
        colorRight = color;

        memcpy(command.data, buffer, 4);

        outgoing.push(command);
        break;
    }
    case 'J':
    {

        Color color = {
            .red = buffer[2],
            .green = buffer[3],
            .blue = buffer[4],
        };

        switch (buffer[1])
        {
        case 0x00:
        {
            colorRight = color;
            break;
        }
        case 0x01:
        {
            colorLeft = color;
            colorRight = color;
            break;
        }
        case 0x02:
        {
            colorLeft = color;
            break;
        }
        }

        break;
    }
    case 'L':
    {

        Color color = {
            .red = buffer[2],
            .green = buffer[3],
            .blue = buffer[4],
        };

        switch (buffer[1])
        {
        case 0x00:
        {
            colorRight = color;
            break;
        }
        case 0x01:
        {
            colorTrap = color;
            break;
        }
        case 0x02:
        {
            colorLeft = color;
            break;
        }
        }

        break;
    }
    case 'Q':
    {
        unsigned char index = (buffer[1] % 0x10);

        unsigned char block = buffer[2];

        Command command = {
            .data = {'Q', (char)(index + 16), buffer[2]}
        };

        Status status = figures[index].status;

        if(status == PRESENT || status == ADDED)
        {
            memcpy(&command.data[3], &figures[index].data[block * 16], 16);
        }
        else
        {
            command.data[1] = 0x01;
        }

        outgoing.push(command);

        break;
    }
    case 'W':
    {
        unsigned char index = (buffer[1] % 0x10);

        unsigned char block = buffer[2];

        Command command = {
            .data = {}
        };

        memcpy(&figures[index].data[block * 16], &buffer[3], 16);

        memcpy(command.data, buffer, 32);

        outgoing.push(command);

        break;
    }
    }
}

void Portal::Poll()
{
    if (canSend)
    {
        if (!outgoing.empty())
        {
            unsigned char command[32] = {};

            memcpy(command, outgoing.front().data, 32);

            outgoing.pop();

            tud_hid_report(0, command, 32);
        }
        // TODO: find a way to make this not break everything
        // else if (active)
        // {
        //     unsigned char command[32] = {};

        //     GetStatus(command);

        //     tud_hid_report(0, command, 32);
        // }
    }
}

void Portal::Enable()
{
    active = true;
}

void Portal::Disable()
{
    active = false;
}

void Portal::GetStatus(unsigned char *target)
{
    unsigned char status[32] = {'S'};

    for (unsigned char i = 0; i < 4; i++)
    {
        unsigned char figureStatus = 0x00;

        for (unsigned char j = 0; j < 4; j++)
        {
            unsigned char index = (4 * i) + j;

            figureStatus |= (figures[index].status << (2 * j));

            if(figures[index].status == REMOVED)
            {
                figures[index].status = NOT_PRESENT;
            }
            else if(figures[index].status == ADDED)
            {
                figures[index].status = PRESENT;
            }
        }

        status[1 + i] = figureStatus;
    }

    status[5] = counter++;

    status[6] = (active) ? 0x01 : 0x00;

    memcpy(target, status, 32);
}

void Portal::RemoveFigure(char index)
{
    figures[index].status = REMOVED;

    unsigned char command[32] = {};

    GetStatus(command);

    tud_hid_report(0, command, 32);
}