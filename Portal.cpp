#include "Portal.hpp"
#include "tusb.h"

Portal::Portal()
{
    
}

Portal* Portal::GetPortal()
{
    static Portal* portal = nullptr;

    if(portal == nullptr)
    {
        portal = new Portal();
    }

    return portal;
}

void Portal::HandleCommand(const unsigned char* buf, unsigned short size)
{
    switch(buf[0])
    {
        case 'R':
        {
            commands.push({.command = 'R'});

            break;
        }
        case 'A':
        {
            Command command = {
                .command = 'A',
                .activate = buf[1]};
            commands.push(command);

            if(buf[1] == 0x01)
                this->Activate();
            else
                this->Deactivate();

            break;
        }
        case 'S':
        {
            commands.push({.command = 'S'});

            break;
        }
        case 'Q':
        {
            static const unsigned char Whirlwind[] = {
                0x56, 0x4d, 0x4e, 0xc8, 0x9d, 0x81, 0x01, 0x0f, 0xc3, 0x85, 0x14, 0x97, 0x41, 0x10, 0x21, 0x12, 
                0x0e, 0x00, 0x00, 0x00, 0xb7, 0xe8, 0x7e, 0xf4, 0x92, 0xd8, 0x00, 0x00, 0x01, 0x18, 0xbf, 0x8c, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x05, 0x60, 0xcf, 0x62, 0x7d, 0x6c, 0x2a, 0x77, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x6d, 0x86, 0x63, 0x8e, 0xce, 0x35, 0x8b, 0xea, 0xdd, 0xd3, 0x19, 0x78, 0xee, 0xd3, 0x2c, 0x7a, 
                0x85, 0x9e, 0x54, 0xad, 0xa0, 0xeb, 0x96, 0x95, 0x02, 0x6b, 0xd5, 0xbf, 0x58, 0x66, 0xe7, 0x8c, 
                0x53, 0x03, 0x2e, 0x07, 0x28, 0x28, 0xed, 0xe8, 0x42, 0xb9, 0x0b, 0x1c, 0x07, 0xf6, 0x30, 0x4f, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0xbd, 0xab, 0x5c, 0xf3, 0x0b, 0xab, 0x23, 0xc2, 0x65, 0x57, 0xb2, 0x79, 0x2b, 0x02, 0x9d, 0x96, 
                0x84, 0x70, 0x84, 0x07, 0x3b, 0xb9, 0xb6, 0x1c, 0xa6, 0x4d, 0x14, 0x24, 0x29, 0x7a, 0x83, 0x95, 
                0x40, 0x07, 0xe9, 0x74, 0x01, 0x6b, 0xf6, 0xad, 0x50, 0x8d, 0x97, 0xab, 0x71, 0x08, 0x77, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0xfd, 0x95, 0xe3, 0x8c, 0x17, 0xc4, 0xab, 0x52, 0x62, 0x04, 0x93, 0x2f, 0x7b, 0x7b, 0xf4, 0x27, 
                0x64, 0x03, 0x08, 0xa6, 0x15, 0xce, 0x7d, 0x5c, 0x67, 0xfd, 0x90, 0x99, 0x22, 0xa1, 0xce, 0xde, 
                0x10, 0x48, 0x1b, 0xe4, 0x97, 0xf9, 0xd2, 0x08, 0x5d, 0xb2, 0x1e, 0x52, 0x21, 0xd7, 0xf7, 0x25, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x63, 0x91, 0x35, 0x5d, 0xd2, 0x15, 0xa8, 0x2a, 0x7a, 0x56, 0xa5, 0x2a, 0x11, 0x60, 0x6a, 0x5d, 
                0xbf, 0xca, 0xed, 0x6e, 0x1b, 0x8b, 0xe1, 0xf4, 0x9c, 0x18, 0x7f, 0xab, 0x14, 0x2d, 0x33, 0x79, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0xf8, 0x29, 0xfb, 0xf5, 0xb6, 0x0e, 0xad, 0xaa, 0x4c, 0x37, 0x52, 0xe1, 0x8d, 0x0d, 0xc0, 0x6a, 
                0x8c, 0x72, 0xab, 0xd8, 0x93, 0x69, 0x14, 0x7a, 0x0f, 0x26, 0xc8, 0x36, 0xcf, 0xc8, 0xec, 0xe7, 
                0x48, 0xf1, 0x75, 0xc5, 0xfd, 0xf4, 0xf9, 0x90, 0x39, 0x43, 0xc9, 0x68, 0x47, 0xf0, 0x3b, 0x2e, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x65, 0x0e, 0xeb, 0x17, 0x7e, 0x67, 0x94, 0x59, 0x3b, 0x23, 0x2c, 0xfb, 0xda, 0xa1, 0xd4, 0x29, 
                0x6d, 0xd0, 0xe6, 0x82, 0xfc, 0xef, 0xfa, 0xca, 0x29, 0x9b, 0xa4, 0x7f, 0xf2, 0x33, 0x7a, 0x71, 
                0x2a, 0xae, 0x48, 0xac, 0x16, 0x2e, 0x30, 0x6e, 0x0c, 0xc1, 0x27, 0xb4, 0x91, 0x15, 0x66, 0x67, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x39, 0xe5, 0x39, 0x19, 0xf4, 0x91, 0xd4, 0x6c, 0x35, 0xc3, 0x7e, 0xfb, 0x9e, 0x3e, 0x8c, 0x89, 
                0xb6, 0x83, 0x31, 0xf4, 0xeb, 0xc3, 0xdd, 0x2b, 0x55, 0x60, 0xba, 0x81, 0xd8, 0x94, 0x6d, 0x6c, 
                0xb8, 0x13, 0xc0, 0x37, 0xff, 0x12, 0x7b, 0x81, 0x17, 0x96, 0xbc, 0xb5, 0xb5, 0x3d, 0x60, 0x9f, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0xa9, 0x31, 0x08, 0x8a, 0x5b, 0x0d, 0x7a, 0xcc, 0x8e, 0x8a, 0xba, 0x5b, 0x09, 0x99, 0x10, 0x05, 
                0x8a, 0x4c, 0x41, 0xb6, 0xa5, 0x41, 0x6b, 0xa7, 0x58, 0xb6, 0x12, 0x24, 0x99, 0xce, 0x0d, 0x9a, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0f, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                };

            Command command = {
                .command = 'Q',
                .query = {
                    .index = (char)((buf[1] % 0x10) + 0x10),
                    .block = buf[2]
                }
                };

            unsigned short offset = 16 * command.query.block;

            memcpy(&command.query.data, &Whirlwind[offset], 16);
            commands.push(command);
        }
        case 'J':
        {
            commands.push({.command = 'J'});
            break;
        }
    }
}

void Portal::Activate()
{
    active = true;
}

void Portal::Deactivate()
{
    active = false;
}

void Portal::SendCommand()
{
    if(!commands.empty())
    {
        Command command = commands.front();
        commands.pop();

        unsigned char out[32] = "";

        out[0] = command.command;

        switch(command.command)
        {
            case 'R':
            {
                out[1] = 0x02;
                out[2] = 0x18;

                break;
            }
            case 'A':
            {
                out[1] = command.activate;
                out[2] = 0xFF;
                out[3] = 0x77;

                break;
            }
            case 'S':
            {
                out[1] = 0x01;
                out[5] = counter++;
                out[6] = active ? 0x01 : 0x00;

                break;
            }
            case 'Q':
            {
                
                out[1] = command.query.index;
                out[2] = command.query.block;
                memcpy(out + 3, command.query.data, 16);

                break;
            }
            case 'J':
            {
                out[0] = 'J';
                break;
            }
        }

        tud_hid_report(0, out, 32);
        readyToSend = false;
    }
    else
    {
        if(active)
        {
            unsigned char out[32] = {'S'};
            out[1] = 0x01;
            out[5] = counter++;
            out[6] = active ? 0x01 : 0x00;
            tud_hid_report(0, out, 32);
            readyToSend = false;
        }
    }
}

void Portal::PortalTask()
{
    if(readyToSend)
    {
        SendCommand();
    }
}